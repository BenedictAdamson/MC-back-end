rootProject.name = 'MC-back-end'


dependencyResolutionManagement {
    versionCatalogs {
        libs {
            version('junit', {
                strictly '[5.9, 5.10['
                prefer '5.9.2'
            })
            version('mc', {
                strictly '[3.2, 3.3['
                prefer '3.2.4'
            })
            version('spock', {
                strictly '2.3-groovy-3.0'
            })
            version('spring-boot', {
                strictly '[2.7, 2.8['
                prefer '2.7.10'
            })
            version('testcontainers', {
                strictly '[1.18, 1.19['
                prefer '1.18.0'
            })

            library('logback-classic', 'ch.qos.logback', 'logback-classic').version {
                strictly '[1.2, 1.3['
                prefer '1.2.12'
            }
            library('jackson-datatype-jsr310', 'com.fasterxml.jackson.datatype', 'jackson-datatype-jsr310').version {
                strictly '[2.13, 2.14['
                prefer '2.13.5'
            }
            library('persistence-api', 'javax.persistence:javax.persistence-api:2.2')
            library('spotbugs', 'com.github.spotbugs', 'spotbugs-annotations').version {
                strictly '[4.7, 4.8['
                prefer '4.7.3'
            }
            library('groovy', 'org.codehaus.groovy', 'groovy').version {
                strictly '[3.0, 3.1['
                prefer '3.0.17'
            }
            library('hamcrest', 'org.hamcrest:hamcrest:2.2')
            library('junit-jupiter-api', 'org.junit.jupiter', 'junit-jupiter-api').versionRef('junit')
            library('junit-jupiter-engine', 'org.junit.jupiter', 'junit-jupiter-engine').versionRef('junit')
            library('junit-platform-console', 'org.junit.platform:junit-platform-console:1.9.2')
            library('opentest4j', 'org.opentest4j:opentest4j:1.2.0')
            library('spock-core', 'org.spockframework', 'spock-core').versionRef('spock')
            library('spock-spring', 'org.spockframework', 'spock-spring').versionRef('spock')
            library('spring-boot-starter-actuator', 'org.springframework.boot', 'spring-boot-starter-actuator').versionRef('spring-boot')
            library('spring-boot-starter-data-mongodb', 'org.springframework.boot', 'spring-boot-starter-data-mongodb').versionRef('spring-boot')
            library('spring-boot-starter-json', 'org.springframework.boot', 'spring-boot-starter-json').versionRef('spring-boot')
            library('spring-boot-starter-security', 'org.springframework.boot', 'spring-boot-starter-security').versionRef('spring-boot')
            library('spring-boot-starter-test', 'org.springframework.boot', 'spring-boot-starter-test').versionRef('spring-boot')
            library('spring-boot-starter-web', 'org.springframework.boot', 'spring-boot-starter-web').versionRef('spring-boot')
            library('spring-security-test', 'org.springframework.security', 'spring-security-test').version {
                strictly '[5.7, 5.8['
                prefer '5.7.7'
            }
            library('testcontainers-junit', 'org.testcontainers', 'junit-jupiter').versionRef('testcontainers')
            library('testcontainers-mongodb', 'org.testcontainers', 'mongodb').versionRef('testcontainers')
            library('dbc-assertions', 'uk.badamson:DBC-assertions:3.0.3')
            library('mc-core', 'uk.badamson.mc', 'MC-core').versionRef('mc')
            library('mc-model', 'uk.badamson.mc', 'MC-model').versionRef('mc')
        }
    }
}

include(':MC-REST')
include(':MC-Spring')
