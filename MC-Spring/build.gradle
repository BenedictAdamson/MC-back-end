plugins {
    id 'uk.badamson.mc.be.java-conventions'
    id 'com.github.spotbugs' version '5.0.14'
    id 'org.springframework.boot' version '2.7.10'
    id 'com.netflix.nebula.deb' version '11.3.0'
    id 'pmd'
}

apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.netflix.nebula.deb'

dependencies {
    api libs.mc.model
    api libs.mc.core
    api project(':MC-REST')
    api libs.jackson.datatype.jsr310
    api libs.spotbugs
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
    implementation 'org.springframework.boot:spring-boot-starter-json'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation libs.logback.classic
    testImplementation libs.hamcrest
    testImplementation libs.junit.jupiter.api
    testImplementation libs.junit.jupiter.engine
    testImplementation libs.junit.platform.console
    testImplementation libs.opentest4j
    testImplementation libs.testcontainers.junit
    testImplementation libs.testcontainers.mongodb
    testImplementation libs.dbc.assertions
    compileOnly libs.persistence.api
}

description = 'MC-Spring'

java {
    withJavadocJar()
    withSourcesJar()
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

tasks.register('packageDeb', Deb) {
    packageName = 'missioncommand-be'
    version = (project.version as String).replace('-SNAPSHOT', '')
    release = 1
    priority = 'optional'
    maintainer = 'Benedict Adamson <badamson@spamcop.net>'
    description = 'back-end of the MC game server'
    distribution = 'stable'

    preInstall file('src/deb/control/preinst')
    postInstall file('src/deb/control/postinst')
    preUninstall file('src/deb/control/prerm')

    requires('java11-runtime-headless')

    into '/usr'

    from(bootJar.outputs.files) {
        into 'share/lib'
    }
    from('src/main/sh/mcbe') {
        into 'bin'
        fileMode 0755
    }
    from('src/main/systemd/mission-command-be.service') {
        into 'lib/systemd/user'
    }
    from('src/main/systemd/be.env') {
        into '/etc/mission-command'
    }
    from('src/main/systemd/adminpsswd.secret') {
        into '/etc/mission-command'
        fileType CONFIG
        fileMode 0600
    }
    link('/usr/share/lib/MC-back-end.jar', "MC-back-end-${project.version}.jar")
}

tasks.register('prepareDockerBuildContext', Copy) {
    dependsOn ':MC-Spring:packageDeb'
    from 'src/main/docker/Dockerfile'
    from(packageDeb.outputs.files) {
        include '*.deb'
        rename 'missioncommand-be_.*_all.deb', 'missioncommand-be.deb'
    }
    into "${project.buildDir}/docker/context"
}
tasks.register('buildDockerImage', Exec) {
    dependsOn ':MC-Spring:prepareDockerBuildContext'
    commandLine 'docker', 'build', '--tag', "benedictadamson/mc-back-end:${project.version}", "${project.buildDir}/docker/context"
}

spotbugs {
    effort = 'Max'
    reportLevel = 'Low'
}
spotbugsTest.enabled = false

pmd {
    ruleSetConfig = resources.text.fromFile('src/test/resources/pmd-ruleset.xml')
}
pmdTest.enabled = false
