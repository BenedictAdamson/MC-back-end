plugins {
    id 'uk.badamson.mc.be.java-conventions'
    id 'groovy'
    id 'pmd'
    id 'com.github.spotbugs' version '5.0.14'
    id 'com.netflix.nebula.deb' version '11.3.0'
    id 'org.springframework.boot' version '3.2.6'
}

apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.netflix.nebula.deb'

import java.time.Instant

description = 'MC-Spring'
def dockerImage = "benedictadamson/mc-back-end:${version}"
def aptRepo = 'mc'


sourceSets {
    intTest {
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
}

configurations {
    intTestImplementation.extendsFrom implementation
    intTestRuntimeOnly.extendsFrom runtimeOnly
    frontEndResources
}


dependencies {
    api libs.mc.model
    api libs.mc.core
    api project(':MC-REST')
    api libs.jackson.datatype.jsr310
    api libs.spotbugs
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
    implementation 'org.springframework.boot:spring-boot-starter-json'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.boot:spring-boot-testcontainers'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation libs.logback.classic
    testImplementation libs.hamcrest
    testImplementation libs.junit.jupiter.api
    testImplementation libs.junit.jupiter.engine
    testImplementation libs.junit.platform.console
    testImplementation libs.opentest4j
    testImplementation libs.testcontainers.junit
    testImplementation libs.testcontainers.mongodb
    testImplementation libs.dbc.assertions
    compileOnly libs.persistence.api
    intTestImplementation libs.groovy
    intTestImplementation libs.junit.jupiter.api
    intTestImplementation libs.junit.jupiter.engine
    intTestImplementation libs.junit.platform.console
    intTestImplementation libs.selenium.firefox.driver
    intTestImplementation libs.selenium.remote.driver
    intTestImplementation libs.selenium.support
    intTestImplementation libs.spock.core
    intTestImplementation libs.testcontainers.junit
    intTestImplementation libs.testcontainers.mongodb
    intTestImplementation libs.testcontainers.selenium
    intTestImplementation libs.testcontainers.spock
    intTestImplementation 'io.projectreactor.netty:reactor-netty-http:1.1.19'
    intTestImplementation 'org.springframework:spring-webflux'
    intTestImplementation 'org.springframework:spring-test'
    intTestImplementation 'org.springframework.boot:spring-boot-starter-test'
    intTestImplementation 'org.springframework.boot:spring-boot-testcontainers'
    intTestImplementation 'org.springframework.security:spring-security-test'
    frontEndResources 'uk.badamson.mc:MC-front-end:3.3.12:client@tgz'
}


java {
    withJavadocJar()
    withSourcesJar()
}

tasks.register('importFrontEndResources', Copy) {
    group = 'Other'
    from tarTree(configurations.frontEndResources.singleFile)
    include "MC-front-end-*/**"
    eachFile { fcd ->
        fcd.relativePath = new RelativePath(true, fcd.relativePath.segments.drop(1))
    }
    includeEmptyDirs = false
    destinationDir file('build/resources/main/static')
}
tasks.processResources.dependsOn('importFrontEndResources')


test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat 'full'
    }
}

String debVersion = (version as String).replace('-SNAPSHOT', '')
int debRelease = (version as String).contains('-SNAPSHOT')? 1 : 2
tasks.register('packageDeb', Deb) {
    inputs.property('debVersion', debVersion)
    inputs.property('debRelease', debRelease)

    group = 'Publishing'
    packageName = 'missioncommand-be'
    version = debVersion
    release = debRelease
    priority = 'optional'
    maintainer = 'Benedict Adamson <badamson@spamcop.net>'
    description = 'back-end of the MC game server'
    distribution = 'stable'

    preInstall file('src/deb/control/preinst')
    postInstall file('src/deb/control/postinst')
    preUninstall file('src/deb/control/prerm')

    requires('java11-runtime-headless')

    into '/usr'

    from(bootJar.outputs.files) {
        into 'share/lib'
    }
    from('src/main/sh/mcbe') {
        into 'bin'
        fileMode 0755
    }
    from('src/main/systemd/mission-command-be.service') {
        into 'lib/systemd/user'
    }
    from('src/main/systemd/be.env') {
        into '/etc/mission-command'
    }
    from('src/main/systemd/adminpsswd.secret') {
        into '/etc/mission-command'
        fileType CONFIG
        fileMode 0600
    }
    link('/usr/share/lib/MC-Spring.jar', "MC-Spring-${version}.jar")
}

tasks.register('aptlyCreateRepo', Exec) {
    inputs.property('aptRepo', aptRepo)
    group = 'Publishing'
    commandLine 'aptly', 'repo', 'create', aptRepo
}
tasks.register('aptlyAddDeb', Exec) {
    inputs.property('aptRepo', aptRepo)
    group = 'Publishing'
    dependsOn ':MC-Spring:aptlyCreateRepo'
    dependsOn ':MC-Spring:packageDeb'
    commandLine 'aptly', 'repo', 'add', aptRepo, file("build/distributions/missioncommand-be_${debVersion}-${debRelease}_all.deb")
}
tasks.register('aptlyPublishDeb', Exec) {
    inputs.property('aptRepo', aptRepo)
    group = 'Publishing'
    dependsOn ':MC-Spring:aptlyAddDeb'
    commandLine 'aptly', 'publish', 'repo', '-batch', '-passphrase-file=gpgpassphrase', aptRepo, 'filesystem:jenkins'
}

tasks.register('prepareDockerBuildContext', Copy) {
    group = 'Publishing'
    dependsOn ':MC-Spring:packageDeb'
    from 'src/main/docker/Dockerfile'
    from(packageDeb.outputs.files) {
        include '*.deb'
        rename 'missioncommand-be_.*_all.deb', 'missioncommand-be.deb'
    }
    into "${project.buildDir}/docker/context"
}
tasks.register('buildDockerImage', Exec) {
    inputs.property('dockerImage', dockerImage)

    group = 'Publishing'
    dependsOn ':MC-Spring:prepareDockerBuildContext'
    commandLine 'docker', 'build', '--tag', dockerImage, "${project.buildDir}/docker/context"
}
tasks.register('loginDockerHub', Exec) {
    def credentials = providers.credentials(PasswordCredentials, 'dockerhub').get()
    standardInput = new ByteArrayInputStream(credentials.password.bytes)
    commandLine 'docker', 'login', '--username', credentials.username, '--password-stdin'
}
tasks.register('pushDockerImage', Exec) {
    group = 'Publishing'
    dependsOn ':MC-Spring:buildDockerImage'
    dependsOn ':MC-Spring:loginDockerHub'
    commandLine 'docker', 'image', 'push', dockerImage
}

spotbugs {
    effort = 'Max'
    reportLevel = 'Low'
}
spotbugsTest.enabled = false
spotbugsIntTest.enabled = false

pmd {
    ruleSetConfig = resources.text.fromFile('src/test/resources/pmd-ruleset.xml')
}
pmdTest.enabled = false
pmdIntTest.enabled = false

processResources {
    inputs.property('version', version)
    expand(
            version: version,
            timestamp: Instant.now().toString()
    )
}

tasks.register('integrationTest', Test) {
    description = 'Runs integration tests.'
    group = 'verification'

    dependsOn tasks.bootJar

    testClassesDirs = sourceSets.intTest.output.classesDirs
    classpath = sourceSets.intTest.runtimeClasspath

    useJUnitPlatform()

    testLogging {
        events "passed"
    }
}
