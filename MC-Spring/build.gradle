plugins {
    id 'uk.badamson.mc.be.java-conventions'
    id 'com.github.spotbugs' version '5.0.14'
    id 'org.springframework.boot' version '2.7.10'
    id 'pmd'
}

apply plugin: 'io.spring.dependency-management'

dependencies {
    api libs.mc.model
    api libs.mc.core
    api project(':MC-REST')
    api libs.jackson.datatype.jsr310
    api libs.spotbugs
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
    implementation 'org.springframework.boot:spring-boot-starter-json'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation libs.logback.classic
    testImplementation libs.hamcrest
    testImplementation libs.junit.jupiter.api
    testImplementation libs.junit.jupiter.engine
    testImplementation libs.junit.platform.console
    testImplementation libs.opentest4j
    testImplementation libs.testcontainers.junit
    testImplementation libs.testcontainers.mongodb
    testImplementation libs.dbc.assertions
    compileOnly libs.persistence.api
}

description = 'MC-Spring'

java {
    withJavadocJar()
    withSourcesJar()
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

spotbugs {
    effort = 'Max'
    reportLevel = 'Low'
}
spotbugsTest.enabled = false

pmd {
    ruleSetConfig = resources.text.fromFile('src/test/resources/pmd-ruleset.xml')
}
pmdTest.enabled = false
